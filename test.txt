import traceback
import io
import json
import pandas as pd
from datetime import datetime
class logger:
    def __init__(self, logs_path):
        self.logs_path = logs_path
        try:
            with open(self.logs_path, 'r') as file:
                self.logs = json.load(file)
        except FileNotFoundError:
                self.logs = {}
        return 
    
    def process_error(self,proc_name,  e):
        self.proc_name = proc_name

        if self.proc_name not in self.logs:
            self.logs[self.proc_name] = {}

        error_string = io.StringIO()
        traceback.print_exception(type(e), e, e.__traceback__, file=error_string)
        self.logs[self.proc_name][datetime.now().strftime('%Y-%m-%d %H:%M:%S')] = {'RESULT': 'FAIL', 'ERROR': error_string.getvalue()}

        json.dump(self.logs,open(self.logs_path, 'w'))
    def process_ok(self, proc_name):

        self.proc_name = proc_name
        if self.proc_name not in self.logs:
            self.logs[self.proc_name] = {}
        self.logs[self.proc_name][datetime.now().strftime('%Y-%m-%d %H:%M:%S')] = {'RESULT': 'OK', 'ERROR': ''}
        json.dump(self.logs,open(self.logs_path, 'w'))




    def action_error(self,proc_name, value, e):
        self.proc_name = proc_name
        self.value = value

        if self.proc_name not in self.logs:
            self.logs[self.proc_name] = {}

        error_string = io.StringIO()
        traceback.print_exception(type(e), e, e.__traceback__, file=error_string)
        self.logs[self.proc_name][datetime.now().strftime('%Y-%m-%d %H:%M:%S')] = {'VALUE': self.value,'RESULT': 'FAIL', 'ERROR': error_string.getvalue()}

        json.dump(self.logs,open(self.logs_path, 'w'))

    def action_ok(self, value, proc_name):

        self.proc_name = proc_name
        self.value = value

        if self.proc_name not in self.logs:
            self.logs[self.proc_name] = {}
        self.logs[self.proc_name][datetime.now().strftime('%Y-%m-%d %H:%M:%S')] = {'RESULT': 'OK', 'ERROR': ''}
        json.dump(self.logs,open(self.logs_path, 'w'))

    def make_process_df(self):
        records = []
        for process, timestamps in self.logs.items():
            for timestamp, data in timestamps.items():
                record = {'Process': process, 'Datetime': timestamp, 'Result': data['RESULT'], 'Error': data['ERROR']}
                records.append(record)
        return pd.DataFrame(records)

    def make_action_df(self):
        records = []
        for process, timestamps in self.logs.items():
            for timestamp, data in timestamps.items():
                record = {'Process': process, 'Datetime': timestamp, 'Value': data['VALUE'],'Result': data['RESULT'], 'Error': data['ERROR']}
                records.append(record)
        return pd.DataFrame(records)
